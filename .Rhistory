add_trace(x=df$filter, y=df$median,type = 'scatter', line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Median"))
p2
p3
p <- plotly::subplot(p1,p2,p3, nrows = 3, shareX = TRUE, titleY = TRUE)
p
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# use pacman to load require packages
if (!require("pacman")) install.packages("pacman") ## important because we will be calling this script multiple times
pacman::p_load(dplyr,raster,tmap,plotly)
# set number of sigfigs
options(scipen=999)
# set tmap to interactive viewing
tmap::tmap_mode("view")
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
images <- list.files(paste0("intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
# loop over months
for(i in seq_along(months)){
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# create a mask object of the radience feature
mask <- r1
mask[mask > 0] <- 1
mask[mask != 1] <- NA
# determine the total number of cells of interest by sum all values.
totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1.
# pull the correct counts feature base on character match and apply mask
count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask
# create df to store results
df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))
colnames(df1) <- c("month","filter","mean","median", "totalArea")
df1$month <- m
df1$filter <- filters
## loop over all seq
for(j in seq_along(filters)){
# generate a mask with the counts image based on the seq value
c2 <- count1
# replace all values based on filter val
c2[c2 < filters[j]] <- NA
# generate a mask base on new filtered data
c2[!is.na(c2)]<- 1
# apply that mask to radaince value
r2 <- r1 * c2
# calculate Mean, median of masked radiance raster
vals <- raster::values(r2)
# drop all na values
vals <- vals[!is.na(vals)]
# calculate values and assign features to dataframe
df1[j,"mean"] <- mean(vals)
df1[j,"median"] <- median(vals)
# count total obervation in mask.
df1[j,"totalArea"] <- 100*(length(vals)/totalCells)
}
# create a new dataframe object on first pass then add directly to that df on
# subsequent passes
if(i == 1){
df <- df1
}else{
df <- dplyr::bind_rows(df, df1)
}
}
df
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter',  line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
p1 <- plot_ly()%>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
### generate the three specific plots
# mean
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Mean"))
# median
p2 <- plot_ly() %>%
add_trace(x=df$filter, y=df$median,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"),     showlegend = FALSE)%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Median"))
# percent area
p3 <- plot_ly() %>%
add_trace(x=df$filter, y=df$totalArea,type = 'scatter', color = df$month, line = list(dash = 'dashdot', shape= "spline"),  showlegend = FALSE) %>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Percent Area"))
### create the subplot
p<- plotly::subplot(p1,p2,p3, nrows = 3, shareX = TRUE, titleY = TRUE)
p
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# use pacman to load require packages
if (!require("pacman")) install.packages("pacman") ## important because we will be calling this script multiple times
pacman::p_load(dplyr,raster,tmap,plotly)
# set number of sigfigs
options(scipen=999)
# set tmap to interactive viewing
tmap::tmap_mode("view")
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
images <- list.files(paste0("intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
# create a dataframe to store information
# loop over all filter option
for(i in filter){
# create a mask based on the counts raster and filter
# apply that mask to the radiance raster
# detemine all vals excluding NAs
# calculate mean, median and percent area and store in data frame
}
# loop over months
for(i in seq_along(months)){
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# create a mask object of the radience feature
mask <- r1
mask[mask > 0] <- 1
mask[mask != 1] <- NA
# determine the total number of cells of interest by sum all values.
totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1.
# pull the correct counts feature base on character match and apply mask
count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask
# create df to store results
df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))
colnames(df1) <- c("month","filter","mean","median", "totalArea")
df1$month <- m
df1$filter <- filters
## loop over all seq
for(j in seq_along(filters)){
# generate a mask with the counts image based on the seq value
c2 <- count1
# replace all values based on filter val
c2[c2 < filters[j]] <- NA
# generate a mask base on new filtered data
c2[!is.na(c2)]<- 1
# apply that mask to radaince value
r2 <- r1 * c2
# calculate Mean, median of masked radiance raster
vals <- raster::values(r2)
# drop all na values
vals <- vals[!is.na(vals)]
# calculate values and assign features to dataframe
df1[j,"mean"] <- mean(vals)
df1[j,"median"] <- median(vals)
# count total obervation in mask.
df1[j,"totalArea"] <- 100*(length(vals)/totalCells)
}
# create a new dataframe object on first pass then add directly to that df on
# subsequent passes
if(i == 1){
df <- df1
}else{
df <- dplyr::bind_rows(df, df1)
}
}
df
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter',  line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
p1 <- plot_ly()%>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
### generate the three specific plots
# mean
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Mean"))
# median
p2 <- plot_ly() %>%
add_trace(x=df$filter, y=df$median,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"),     showlegend = FALSE)%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Median"))
# percent area
p3 <- plot_ly() %>%
add_trace(x=df$filter, y=df$totalArea,type = 'scatter', color = df$month, line = list(dash = 'dashdot', shape= "spline"),  showlegend = FALSE) %>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Percent Area"))
### create the subplot
p<- plotly::subplot(p1,p2,p3, nrows = 3, shareX = TRUE, titleY = TRUE)
p
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_2")
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output lication
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_3")
# create a vector of county names to loop over
counties <- c("Bexar", "Brazoria", "Harris")
for(i in counties ){
print(i)
# define the county based on place in the loop
county <- i
# provide a path to the file and an output location
## edit the output path to distinguish output based on location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = paste0("intermediateGeospatialR/outputs/summary_test_",i))
}
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "F:/R_SC_Spatial/intermediateGeospatialR/outputs/summary_test")
# loop over months
for(i in seq_along(months)){
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# create a mask object of the radience feature
mask <- r1
mask[mask > 0] <- 1
mask[mask != 1] <- NA
# determine the total number of cells of interest by sum all values.
totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1.
# pull the correct counts feature base on character match and apply mask
count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask
# create df to store results
df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))
colnames(df1) <- c("month","filter","mean","median", "totalArea")
df1$month <- m
df1$filter <- filters
## loop over all seq
for(j in seq_along(filters)){
# generate a mask with the counts image based on the seq value
c2 <- count1
# replace all values based on filter val
c2[c2 < filters[j]] <- NA
# generate a mask base on new filtered data
c2[!is.na(c2)]<- 1
# apply that mask to radaince value
r2 <- r1 * c2
# calculate Mean, median of masked radiance raster
vals <- raster::values(r2)
# drop all na values
vals <- vals[!is.na(vals)]
# calculate values and assign features to dataframe
df1[j,"mean"] <- mean(vals)
df1[j,"median"] <- median(vals)
# count total obervation in mask.
df1[j,"totalArea"] <- 100*(length(vals)/totalCells)
}
# create a new dataframe object on first pass then add directly to that df on
# subsequent passes
if(i == 1){
df <- df1
}else{
df <- dplyr::bind_rows(df, df1)
}
}
i
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
grepl(pattern = m, x = images)
m
images
### grab imagery for county
images <- list.files(paste0("intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
images
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
r1
# loop over months
for(i in seq_along(months)){
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# create a mask object of the radience feature
mask <- r1
mask[mask > 0] <- 1
mask[mask != 1] <- NA
# determine the total number of cells of interest by sum all values.
totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1.
# pull the correct counts feature base on character match and apply mask
count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask
# create df to store results
df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))
colnames(df1) <- c("month","filter","mean","median", "totalArea")
df1$month <- m
df1$filter <- filters
## loop over all seq
for(j in seq_along(filters)){
# generate a mask with the counts image based on the seq value
c2 <- count1
# replace all values based on filter val
c2[c2 < filters[j]] <- NA
# generate a mask base on new filtered data
c2[!is.na(c2)]<- 1
# apply that mask to radaince value
r2 <- r1 * c2
# calculate Mean, median of masked radiance raster
vals <- raster::values(r2)
# drop all na values
vals <- vals[!is.na(vals)]
# calculate values and assign features to dataframe
df1[j,"mean"] <- mean(vals)
df1[j,"median"] <- median(vals)
# count total obervation in mask.
df1[j,"totalArea"] <- 100*(length(vals)/totalCells)
}
# create a new dataframe object on first pass then add directly to that df on
# subsequent passes
if(i == 1){
df <- df1
}else{
df <- dplyr::bind_rows(df, df1)
}
}
df
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
setwd("F:/R_SC_Spatial/intermediateGeospatialR")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
setwd("F:/R_SC_Spatial/intermediateGeospatialR")
setwd("F:/R_SC_Spatial/")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
getwd()
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_2")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "F:/R_SC_Spatial/intermediateGeospatialR/outputs/summary_test")
setwd("F:/R_SC_Spatial/")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "/intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "/intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "~intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "~intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input =~"intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
images <- list.files(paste0(~"intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0(~"intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
### grab imagery for county
files <- paste0("intermediateGeospatialR/data/nightLights/", county)
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# input features
county <<- "Bexar"
months <<- c("april", "may", "june", "july")
# input features
county <<- "Bexar"
months <<- c("april", "may", "june", "july")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
files <- paste0("intermediateGeospatialR/data/nightLights/", county)
images <- list.files(files, pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
images
i
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = ~"intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~~"intermediateGeospatialR/outputs/summary_test_2")
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = ~"intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~~"intermediateGeospatialR/outputs/summary_test_2")
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test_2")
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
setwd("F:/R_SC_Spatial/")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# use pacman to load require packages
if (!require("pacman")) install.packages("pacman") ## important because we will be calling this script multiple times
pacman::p_load(dplyr,raster,tmap,plotly)
# set number of sigfigs
options(scipen=999)
# set tmap to interactive viewing
tmap::tmap_mode("view")
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
files <- paste0("intermediateGeospatialR/data/nightLights/", county)
images <- list.files(files, pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
files
images
counts
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = ~"intermediateGeospatialR/outputs/summary_test")
# code taken from https://rpubs.com/ccmothes/ColoradoSpecies
packageLoad <-
function(x) {
for (i in 1:length(x)) {
if (!x[i] %in% installed.packages()) {
install.packages(x[i])
}
library(x[i], character.only = TRUE)
}
}
packageLoad(c("raster", "dplyr", "sf","sp", "rgdal", "tmap", "plotly", "pacman"))
install.packages(x[i])
# code taken from https://rpubs.com/ccmothes/ColoradoSpecies
packageLoad <-
function(x) {
for (i in 1:length(x)) {
if (!x[i] %in% installed.packages()) {
install.packages(x[i])
}
library(x[i], character.only = TRUE)
}
}
packageLoad(c("raster", "dplyr", "sf","sp", "rgdal", "tmap", "plotly", "pacman"))
install.packages(x[i])
install.packages("tmap")
install.packages("pacman")
packageLoad(c("raster", "dplyr", "sf","sp", "rgdal", "tmap", "plotly", "pacman"))
